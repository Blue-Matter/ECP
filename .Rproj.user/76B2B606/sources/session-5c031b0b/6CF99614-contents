

is_Blow = function(MSEobj,MPind,PPDy,stockind=2){

  yind = MSEobj@nyears+11:30 # projection years 1:30 for Blim
  Blow = function(x)any(x<0.2) # half of Blim
  temp = MSEobj@B_BMSY[MPind,,stockind,yind] #  stocks
  apply(temp,1,Blow)

}

is_Blim = function(MSEobj,MPind,PPDy,stockind=2){

  yind = MSEobj@nyears+11:30 # projection years 1:30 for Blim
  Blow = function(x)any(x<0.4) # half of Blim
  temp = MSEobj@B_BMSY[MPind,,stockind,yind] #  stocks
  apply(temp,1,Blow)

}

Index_compiler<-function(dir=NULL,name=NULL, MPind=NULL, dummy_obs=T, First_Yr = 2020,dummycut=5){

  if(is.null(Indices))stop("You need to run loadABT()")

  files<-list.files(dir)
  isMSE<-grepl("MSE_",files)
  MSEref<-c(paste0("MSE_",1:48),paste0("MSE_R_",1:44))
  nOMs<-length(MSEref)
  fileref<-paste0(dir,MSEref,".rda")

  MSEobj= readRDS(fileref[1])
  if(length(MSEobj@PPD)==0) stop(paste0("There are no posterior predicted data in: ",fileref[1],". You need to run the MSEs with the argument returnMSE = T, see CMP dev guide"))
  if(is.null(MPind))MPind = length(MSEobj@PPD)

  Eastind = 1
  PPDi = MSEobj@PPD[[MPind]][[Eastind]]$Iobs # second tier is stock and that is identical in terms of index reporting - same indices are available to both stocks
  idims = dim(PPDi)

  lastYr = 2019
  nsim = idims[1]
  nind = idims[2]
  PPDy = idims[3]
  yind = (MSEobj@nyears+1):PPDy
  npy=length(yind)
  Yrs = lastYr + 1: npy

  PPD = array(NA,c(nsim,nOMs,nind+2,npy)) # +2 is the combined indices being added
  npow=5
  Pow = array(F,c(nsim,nOMs,npow))

  # fileref = rep(fileref[1:48],20)[1:nOMs]

  for(OM in 1:nOMs){
    MSEobj<-readRDS(fileref[OM])
    PPDi = MSEobj@PPD[[MPind]][[Eastind]]$Iobs # second tier is stock and that is identical in terms of index reporting - same indices are available to both stocks
    PPD[,OM,1:nind,] = PPDi[,,yind]

    EC = MakeEComb(PPDi) # eastern combined
    PPD[,OM,nind+1,]=EC[,yind]
    WC = MakeWComb(PPDi) # western combined
    PPD[,OM,nind+2,]=WC[,yind]

    Pow[,OM,1]= is_Blow(MSEobj,MPind,PPDy,stockind=1)
    Pow[,OM,2]= is_Blow(MSEobj,MPind,PPDy,stockind=2)
    Pow[,OM,3]= is_Blow(MSEobj,MPind,PPDy,stockind=1:2)
    Pow[,OM,4]= is_Blim(MSEobj,MPind,PPDy,stockind=1)
    Pow[,OM,5]= is_Blim(MSEobj,MPind,PPDy,stockind=2)
  }

  DesignRef = ABTMSE::Design$Design_Ref
  # ref OMs default: 1L, 2L, 1L, 2L.

  ROMind = c(rep(c(1,2,4,5),8),c(3,6,3,6),rep(c(1,2,4,5),2))
  Design = rbind(DesignRef, DesignRef[ROMind,])
  Design = cbind(Design,c(rep("Ref",48),rep("Rob",44)))
  names(Design) = c("Recruitment","Mat_M","Scale","CompWt","Ref_Rob")
  row.names(Design) = 1:nrow(Design)

  dimnames(PPD)[[1]] = dimnames(Pow)[[1]] = paste0("Sim_",1:48)
  dimnames(PPD)[[2]] = dimnames(Pow)[[2]] = c(paste0("Ref_",1:48),paste0("Rob_",1:44))
  dimnames(PPD)[[3]] = c(Indices$Name,"East Combined (MP)","West Combined (MP)")
  dimnames(PPD)[[4]] = Yrs
  dimnames(Pow)[[3]] = c("E 1/2 Blim","W 1/2 Blim","EorW 1/2 Blim", "E Blim", "W Blim")

  Data_Design = rep("Index",nind)

  # Set up default selections
  Defaults = list()

  OM_def = as.list(apply(Design,2,function(x){unique(x)}))
  OM_def[[5]] = "Ref"
  yind = 1:8
  
  #                     Data                      yrs   OMs     alph  powind tail
  Defaults[[1]] = list(c(15,16),                  yind, OM_def, 0.05, NaN,   "interval") # Primary Combined MP indices
  Defaults[[2]] = list(c(1,2,3,4,5,6,10,12,13,14),yind, OM_def, 0.05, NaN,   "interval") # Primary individual indices
  Defaults[[3]] = list(c(3,10,12,13,14),          yind, OM_def, 0.05, NaN,   "interval") # Primary individual western indices
  Defaults[[4]] = list(c(1,2,4,5,6),              yind, OM_def, 0.05, NaN,   "interval") # Primary individual eestern indices
  
  for(i in 1:length(Defaults)) names(Defaults[[i]]) = c("Data","yind","OM","alph","powind","tail")
  names(Defaults)=c("Combined (MP)","Individual","W. Ind","E. Ind")

  Obs = PPD[1,1,,]
  if(dummy_obs)  Obs[,dummycut:npy] = NA
  if(!dummy_obs) Obs[,dummycut:npy] = NA

  return(list(PPD=PPD, OM_Design=Design, Defaults = Defaults, Obs = Obs, Pow=Pow,
         First_Yr = First_Yr, Version = packageVersion('ABTMSE'),Sys.time=Sys.time()))

  # ECP_obj = list(PPD=PPD, OM_Design=Design, Defaults = Defaults, Obs = Obs, Pow=Pow, First_Yr = First_Yr, Version = packageVersion('ABTMSE'),Sys.time=Sys.time())


}

Add_Index_Data=function(ECP_obj,xlsheet="G:/Shared drives/BM shared/1. Projects/Bluefin_ECP/data/New Indices.xlsx"){

  nd = as.data.frame(read_excel(xlsheet,sheet="Rescaled_Indices"))
  nd[nd==0]=NA
  obsnam = dimnames(ECP_obj$Obs)[[1]]
  datcols = 3:ncol(nd)
  inds = match(names(nd[,datcols]),obsnam)
  PPDyr = dimnames(ECP_obj$Obs)[[2]]
  PPD_yind = PPDyr%in%nd$Year
  Obs_yind = nd$Year%in%PPDyr
  ECP_obj$Obs[]=NA
  ECP_obj$Obs[inds,PPD_yind]=t(nd[Obs_yind,datcols])
  ECP_obj

}


Add_Comb_Index_Data=function(ECP_obj,xlsheet="G:/Shared drives/BM shared/1. Projects/Bluefin_ECP/data/New Indices.xlsx",MSEny=107){


  nind = dim(ECP_obj$Obs)[1]
  ny = dim(ECP_obj$Obs)[2]
  Obsi = array(NA,c(1,nind,MSEny))

  nd = as.data.frame(read_excel(xlsheet,sheet="Rescaled_Indices"))
  nd[nd==0]=NA
  obsnam = dimnames(ECP_obj$Obs)[[1]]
  datcols = 3:ncol(nd)
  inds = match(names(nd[,datcols]),obsnam)
  Obs_yind = as.numeric(nd$Year)-1964

  Obsi[1,inds,Obs_yind]=t(nd[,datcols])

  EC = MakeEComb(Obsi)
  WC = MakeWComb(Obsi)

  PPDyr = dimnames(ECP_obj$Obs)[[2]]
  PPD_yind = PPDyr%in%nd$Year
  Obs_yind = (1964+1:MSEny)%in%PPDyr

  ECP_obj$Obs[15,]=EC[Obs_yind]
  ECP_obj$Obs[16,]=WC[Obs_yind]

  ECP_obj

}

slp4<-function(y){
  x1<-1:length(y)
  x1 <- x1[!is.na(y)]
  y<-y[!is.na(y)]
  y<-log(y)
  mux<-mean(x1)
  muy<-mean(y,na.rm=T)
  SS<-sum((x1-mux)^2,na.rm=T)
  (1/SS)*sum((x1-mux)*(y-muy),na.rm=T)
}

#
MakeEComb = function(PPDi,IwE = c(1.33,1.66,1.06,1.43,1.33)){       # Relative index weights){

  nsim=dim(PPDi)[1]
  ny= dim(PPDi)[3]
  Ind_E = array(NA,c(nsim,ny))

  for(x in 1:nsim){
    relInd1 = PPDi[x,1,]/mean(PPDi[x,1,50:53],na.rm=T)	# FR_AER_SUV2 (!use 2014-2017 for the average)
    relInd2 = PPDi[x,2,]/mean(PPDi[x,2,48:52],na.rm=T)	# MED_LAR_SUV (!use 2012-2016 for the average)
    relInd3 = PPDi[x,4,]/mean(PPDi[x,4,51:54],na.rm=T)	# GBYP_AER_SUV_BAR (!use 2015-2018 for the average)
    relInd4 = PPDi[x,5,]/mean(PPDi[x,5,48:54],na.rm=T)	# MOR_POR_TRAP (!use 2012-2018 for the average)
    relInd5 = PPDi[x,6,]/mean(PPDi[x,6,48:55],na.rm=T)	# JPN_LL_NEAtl2 (!use 2012-2019 for the average)

    for (y in 1:ny) {
      Itmp  <- c(relInd1[y],relInd2[y],relInd3[y],relInd4[y],relInd5[y])
      Ind_E[x,y] <- weighted.mean(Itmp,IwE,na.rm=T)
    }
  }
  Ind_E[is.na(Ind_E)] = NA
  Ind_E
}


MakeWComb = function(PPDi,IwW = c(1.33,2.55,1.39,3.96,2.88)){        # Relative index weights){

   nsim=dim(PPDi)[1]
   ny= dim(PPDi)[3]
   Ind_W = array(NA,c(nsim,ny))

   for(x in 1:nsim){
     relInd6 = PPDi[x,3,]/mean(PPDi[x,3,42:53],na.rm=T)	  # GOM_LAR_SUV (!use 42-53 for the average)
     relInd7 = PPDi[x,13,]/mean(PPDi[x,13,42:54],na.rm=T)	# US_RR_66_144 (!use 42-54 for the average)
     relInd8 = PPDi[x,14,]/mean(PPDi[x,14,42:54],na.rm=T)	# MEXUS_GOM_PLL (!use 42-54 for the average)
     relInd9 = PPDi[x,10,]/mean(PPDi[x,10,46:55],na.rm=T)	# JPN_LL_West2 (!use 46-55 for the average)
     relInd10 = PPDi[x,12,]/mean(PPDi[x,12,42:53],na.rm=T)	# CAN_SWNS (!use 42-53 for the average)

     for (y in 1:ny) {
       Itmp  <- c(relInd6[y],relInd7[y],relInd8[y],relInd9[y],relInd10[y])
       Ind_W[x,y] <- weighted.mean(Itmp,IwW,na.rm=T)
     }
   }
   Ind_W[is.na(Ind_W)] = NA
   Ind_W
}


Append_Index_Slopes = function(ECP_obj){

  ECP_nu = ECP_obj
  obslp = apply(ECP_obj$Obs[,1:4],1,slp4)

  obsmat = array(NA,dim(ECP_obj$Obs))
  obsmat[,4] = obslp
  dimnames(obsmat)[[2]] = dimnames(ECP_obj$Obs)[[2]]
  dimnames(obsmat)[[1]] = paste0("Slp_",dimnames(ECP_obj$Obs)[[1]])

  ECP_nu$Obs = rbind(ECP_obj$Obs,obsmat)

  predmat = array(NA, dim(ECP_obj$PPD))
  ny = dim(ECP_obj$PPD)[4]

  for(y in 3:ny){
    predmat[,,,y] = apply(ECP_obj$PPD[,,,(y-2):y],1:3,slp4)
    cat(paste(y,"- "))
  }
  cat("\n")
  dimnames(predmat) = dimnames(ECP_obj$PPD)
  dimnames(predmat)[[3]] = paste0("Slp_",dimnames(ECP_obj$PPD)[[3]])

  ECP_nu$PPD = abind(ECP_obj$PPD,predmat,along=3)
  #ECP_nu$Defaults$Data = c(ECP_obj$Defaults$Data, dim(ECP_obj$Obs)[1] + ECP_obj$Defaults$Data)
  ECP_nu

}

Append_SOO = function(ECP_obj, dir = "C:/temp2/ECP2/",
                      OMdirs =paste0("C:/Users/tcar_/Dropbox/abft-mse/objects/OMs/",c(1:48,c(rep(c(1,2,4,5),8),c(3,6,3,6),rep(c(1,2,4,5),2)))),
                      OMIs = paste0("OMI_",c(1:48,c(rep(c(1,2,4,5),8),c(3,6,3,6),rep(c(1,2,4,5),2)))),
                      dummy_obs=T,MPind=NULL){

  files<-list.files(dir)
  isMSE<-grepl("MSE_",files)
  MSEref<-c(paste0("MSE_",1:48),paste0("MSE_R_",1:44))
  nOMs<-length(MSEref)
  fileref<-paste0(dir,MSEref,".rda")

  MSEobj= readRDS(fileref[1])
  if(length(MSEobj@PPD)==0) stop(paste0("There are no posterior predicted data in: ",fileref[1],". You need to run the MSEs with the argument returnMSE = T, see CMP dev guide"))
  if(is.null(MPind))MPind = length(MSEobj@PPD)

  Eastind = 1
  PPDi = MSEobj@PPD[[MPind]][[Eastind]]$Iobs # second tier is stock and that is identical in terms of index reporting - same indices are available to both stocks
  idims = dim(PPDi)

  lastYr = 2019
  nsim = idims[1]
  nind = 8 # WATL ac23 season#, GSL 123, NATL 123 EATL SOO by age class
  PPDy = idims[3]
  yind = (MSEobj@nyears+1):PPDy
  npy=length(yind)
  Yrs = lastYr + 1: npy
  PPD = array(NA,c(nsim,nOMs,nind,npy))
  #as = c(2,3,5,6) # WATL, GSL, NATL, EATL

  set.seed(1)
  sfInit(parallel=T,cpus=8)
  sfLibrary(ABTMSE)
  OMIex<-paste0("OMI_",1:48)
  sfExport(list=as.list(OMIex)) # OMs are the actual objects

  getSOOobs = function(OM,fileref,OMdirs,OMIs,MPind,nsim,npy,yind){
    #for(OM in 1:nOMs){
    ilogit = function(x)exp(x)/(1+exp(x))
    logit = function(x)log(x/(1-x))

    MSEobj<-readRDS(fileref[OM])
    out =  M3read(OMDir=OMdirs[OM])
    OMI = get(OMIs[OM])
    SOOobs = OMI@SOOobs
    names(SOOobs) =  c("a",  "y", "s", "r",   "N", "probE",  "SE", "Type", "wt")
    SOOpred = out$SOOpred
    CTA = MSEobj@CTA[MPind,,,,,] #  48   3 109   4   7

    err = array(NA,c(nsim,8,npy))
    j = 0
    for(ac in 2:3){
      for(ss in 1:4){
        SOOind = SOOobs[,1] == ac & SOOobs[,3] == ss & SOOobs[,4]==2
        SOOo = SOOobs[SOOind,6]
        SOOp = SOOpred[SOOind]
        SD = sd(SOOo-SOOp) # log sd
        #SD=1
        j=j+1
        err[,j,] = logit(CTA[,ac,yind,ss,2])*array(rnorm(nsim*npy,0,SD),c(nsim,npy))
        #print(paste(ac,"-",ss,"-",length(SOOp),"-",SD))


      }
    }
    #cat(OM);cat("-")
    err
  }

  errs = sfLapply(1:nOMs,getSOOobs,fileref=fileref,OMdirs=OMdirs,OMIs=OMIs,MPind=MPind,nsim=nsim,npy=npy,yind=yind)
  for(OM in 1:nOMs)  PPD[,OM,,] = errs[[OM]]#logit(CTA[,ac,yind,ss,2])*err # area 2 is WATL

  dimnames(PPD)[[1]] = paste0("Sim_",1:48)
  dimnames(PPD)[[2]] = c(paste0("Ref_",1:48),paste0("Rob_",1:44))
  dimnames(PPD)[[3]] = paste0("WATL_SOO_a",rep(2:3,each=4),"_q",rep(1:4,2))
  dimnames(PPD)[[4]] = Yrs

  ECP_nu = ECP_obj

  obsmat=PPD[1,1,,]
  if(dummy_obs)obsmat[,5:npy] = NA
  if(!dummy_obs)obsmat[] = NA

  ECP_nu$Obs = rbind(ECP_obj$Obs,obsmat)

  ECP_nu$PPD = abind(ECP_obj$PPD,PPD,along=3)
  #ECP_nu$Defaults$Data = c(ECP_obj$Defaults$Data, dim(ECP_obj$Obs)[1] + 1:nind)
  ECP_nu

}


Brute_find = function(ECP_obj, OMind, Iind, yind, powind, tail, targ_cml_alp = 0.2, yr=3){

  ni = length(Iind)
  perms = expand.grid(rep(list(c(T,F)),ni))
  np = nrow(perms)

  findpow = function(x,perms,ECP_obj, OMind, Iind, yind, powind, tail, targ_cml_alp = 0.1,yr){
    incvec = unlist(perms[x,])
    errmat=EPTO(ECP_obj, OMind, Iind[incvec], yind, powind, tail[incvec], alp_rng = c(0.001,0.05),ys=c(yr,6),plot=F)
    t1s =  errmat[1,,1]
    pows = errmat[1,,2]
    approx(t1s,pows,targ_cml_alp)$y
  }

  pows = sapply(1:10,findpow,perms=perms,ECP_obj=ECP_obj, OMind=OMind, Iind=Iind, yind=yind, powind=powind, tail=tail, targ_cml_alp = 0.1)

  sfInit(parallel=T,cpus=7)
  sfExport(list=list('perms',"ECP_obj",'OMind','Iind','yind','powind','tail','targ_cml_alp','EPTO','Seq_Pow_Calc_Marg','yr','pcalc2'))
  pows = sfSapply(1:np,findpow,perms=perms,ECP_obj=ECP_obj, OMind=OMind, Iind=Iind, yind=yind, powind=powind, tail=tail, targ_cml_alp = 0.1)


}


Bproj_compiler<-function(dir=NULL, name=NULL, MPind=NULL, dummy_obs=T, First_Yr = 2020, dummycut=5){

  files<-list.files(dir)
  isMSE<-grepl("MSE_",files)
  MSEref<-c(paste0("MSE_",1:48),paste0("MSE_R_",1:44))
  nOMs<-length(MSEref)
  fileref<-paste0(dir,MSEref,".rda")

  MSEobj= readRDS(fileref[1])
  if(length(MSEobj@PPD)==0) stop(paste0("There are no posterior predicted data in: ",fileref[1],". You need to run the MSEs with the argument returnMSE = T, see CMP dev guide"))
  MPind = length(MSEobj@PPD)

  Eastind = 1
  PPDi = MSEobj@PPD[[MPind]][[Eastind]]$Iobs # second tier is stock and that is identical in terms of index reporting - same indices are available to both stocks
  idims = dim(PPDi)

  lastYr = 2019
  nsim = idims[1]
  nind = idims[2]
  PPDy = idims[3]
  yind = (MSEobj@nyears+1):PPDy
  npy=length(yind)
  Yrs = lastYr + 1: npy

  Bproj = array(NA,c(nOMs,nsim,2,npy))

  for(OM in 1:nOMs){
    MSEobj<-readRDS(fileref[OM])
    Bproj[OM,,,]=MSEobj@B_BMSY[MPind,,,yind]

  }

  Bproj

}

plot_Bproj = function(Bproj,yind=1:31){

  nsim=dim(Bproj)[2]
  ystoplot = yind
  Yrs = 2020-1+yind
  ybar = 2020-1+c(11,30)
  qs=apply(Bproj[,,,yind],3,quantile,p=c(0.001,0.98),na.rm=T)
  par(mfrow=c(3,2),mai=c(0.3,0.3,0.1,0.1),omi=c(0.2,0.2,0.25,0.01))

  OMinds = list(Design$Design_Ref[,1]==1,
                Design$Design_Ref[,1]==2,
                Design$Design_Ref[,1]==3)

  OMcols = c('#00ff0090','#0000ff90','#ff000090')

  for(OM in 1:length(OMinds)){
   for(ss in 2:1){

    plot(c(min(Yrs),max(Yrs)+1),range(qs,na.rm=T),yaxs = 'i',col='white',xlab="",ylab="")
    grid()
    #abline(v=c(2022,2028))
    polygon(c(2022,2022,2028,2028),c(0,1000,1000,0),border=NA,col="#99999940")
    abline(v=ybar,lty=2)
    abline(h=0.4,lty=2)

    for(yy in yind){

        vec = as.vector(Bproj[OMinds[[OM]],,ss,yy])
        dens=density(vec,na.rm=T)
        ys = 0.95*((dens$y-min(dens$y)) / (max(dens$y,na.rm=T)-min(dens$y)))
        polygon(Yrs[yy]+ys,dens$x,col=OMcols[OM],border=NA)
    }
    legend('topleft',legend=paste("Rec. Lev.",OM),bty='n',cex=1.2)
    if(OM==1)mtext(c("Eastern","Western")[ss],3,line=0.8)
   }

  }

  mtext("SSB/SSBMSY (dyn)",2,outer=T, line=0.1,font=2)
  mtext("Projection Year",1,outer=T, line=0.25,font=2)

}
